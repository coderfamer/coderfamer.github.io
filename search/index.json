[{"content":"hugo 安装和使用 hugo 安装 建立站点 1 hugo new site hugo_blog 添加主题 1 2 3 cd hugo_blog git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 配置文件中使用指定主题\n1 echo \u0026#39;theme = \u0026#34;ananke\u0026#34;\u0026#39; \u0026gt;\u0026gt;config.toml 创建新文章 1 hugo new posts/my-first-post.md 1 2 3 4 5 6 7 --- title: \u0026#34;My First Post\u0026#34; date: 2022-12-02T00:00:08+08:00 draft: false --- ## first post 开启本地服务 1 hugo server --bind=0.0.0.0 --baseURL=http://\u0026lt;yourhost\u0026gt;:1313 在 github 部署个人博客 使用 github 的 user pagers 功能创建\ncoderfamer.github.io\n1 2 rm -rf public git submodule add -b master git@github.com:\u0026lt;yourgitname\u0026gt;/\u0026lt;yourgitname\u0026gt;.github.io.git public 在根目录的 config.toml 添加 baseURL\n1 baseURL = \u0026#39;https://\u0026lt;youergit\u0026gt;.github.io/\u0026#39; 生成静态网页，提交代码\n1 2 3 4 5 hugo cd public git add --all git commit . \u0026#34;first post\u0026#34; git push origin master ","date":"2022-12-02T00:20:59+08:00","permalink":"https://coderfamer.github.io/p/hugo/","title":"Hugo"},{"content":"first post ","date":"2022-12-02T00:00:08+08:00","permalink":"https://coderfamer.github.io/p/my-first-post/","title":"My First Post"},{"content":"centos 7 离线安装 kubernets (k8s) 下载离线安装包 准备一个可以连接外网的 centos7 机器，机器做好快照。\n准备 安装必要程序\n1 yum install yum-utils 生成docker 安装包 因需要 docker 程序拉取 k8s 的相关镜像，测试机需要安装 docker\n更新 docker 源 1 2 yum install -y epel-release.noarch yum-config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo 导出并安装 导出 docker 安装包和其依赖包\n1 2 mkdir docker \u0026amp;\u0026amp; cd docker yumdownloader --resolve docker ce 安装并启动 docker\n1 2 yum install -y docker-ce systemctl start docker 1 systemctl enable docker \u0026amp;\u0026amp; systemctl start docker k8s 包及相关镜像 k8s 安装包 导出 配置修改 yum 源 vim /etc/yum.repos.d/kubernets.repo\n1 2 3 4 5 6 7 8 [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=1 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg 重新生成 repo 信息\n1 yum clean all \u0026amp;\u0026amp; yum makecache 离线下载安装包\n1 yumdownlaoder --reslove kubelet kubeadm kubectl 查看安装包 ls k8s 相关镜像导出 k8s 基本镜像如下\n1 2 3 4 5 6 7 k8s.gcr.io/kube-apiserver:v1.23.6 k8s.gcr.io/kube-controller-manager:v1.23.6 k8s.gcr.io/kube-scheduler:v1.23.6 k8s.gcr.io/kube-proxy:v1.23.6 k8s.gcr.io/pause:3.6 k8s.gcr.io/etcd:3.5.1-0 k8s.gcr.io/coredns/coredns:v1.8.6 docker 拉取所有镜像，并导出镜像\n1 2 3 4 # 拉取镜像、打标签、删除旧的镜像 docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.23.6 docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.23.6 k8s.gcr.io/kube-apiserver:v1.23.6 docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.23.6 1 2 # 导出镜像保存为 tar 包 docker save -o kube-apiserver.tar k8s.gcr.io/kube-apiserver:v1.23.6 对所有的镜像执行类似操作，可以通过脚本解决 将所有导出的 rpm 包和 tar 镜像打包保存备用。\n下载网络插件 选择一 选用 Flannel 插件\nflannel\n下载 flanneld-v0.17.0-amd64.docker 文件备用\n选择二 选用 calico 网络插件\ncalico\n下载网络插件\n1 2 wget https://docs.projectcalico.org/v3.20/manifests/calico.yaml kubectl apply -f calico.yaml docker 会自动下载 calico 相关镜像 导出，备用\n准备好的包大概如下 安装 k8s 准备操作 1 2 3 4 5 6 7 8 9 # 关闭防火墙 systemctl disalbe firewalld systemctl stop firewalld # 关闭 selinux sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/g\u0026#39; /etc/sysconfig/selinux setenforce 0 # 禁用 swap 分区 swapoff -a # 临时禁用 sed -i \u0026#39;s/.*swap.*/#\u0026amp;/\u0026#39; /etc/fstab #永久禁用 设置 iptables 网桥参数\n1 2 3 4 cat \u0026lt;\u0026lt;EOF | tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF 1 2 sysctl --system sysctl -a 安装 docker 拷贝保存好的 docker 相关 rpm 包\n1 2 cd docker yum localinstall -y docker-ce 修改 docker 的 cgroup 驱动\n1 2 3 4 5 6 7 8 9 10 cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/docker/daemon.json { \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;], \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34; }, \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } EOF 启动docker\n1 2 3 systemctl daemon-reload systemctl start docker systemctl enable docker 安装 k8s 拷贝 k8s 相关 rpm 包\n1 2 3 4 cd k8s yum localinstall * --disableexcludes=kubernetes systemctl start kubelet systemctl enable kubelet 加载 k8s 相关镜像 拷贝相关镜像包\n1 2 cd images find -type f -iname \u0026#34;*.tar\u0026#34; | xargs -i docker load --input {} 加载 k8s 网络插件相关镜像\n1 2 cd calico find -type f -iname \u0026#34;*.tar\u0026#34; | xargs -i docker load --input {} 安装 master 节点 以及 node 加入集群 master 节点 所有的准备工作已经就绪，运行 kuberadm init 命令即可意见安装 k8s 的 master 节点, kubeadm 安装过程不会初始化网络插件，安装网络插件对 kuberadm init 会有一定的参数要求。以 calico 为例，安装时候需要指定 \u0026ndash;pod-network-cidr=192.168.0.0/16\n安装 默认 hostname 可能为 localhost.localdomain，可以通过 hosntame 命令查看，需要修改 hostname 名称，防止后续添加 node 冲突\n1 2 # 设置 hostname hostnamectl set-hostname k8s-master 安装 master 节点\n1 kubeadm init --pod-network-cidr=192.168.0.0/16 安装成功之后，需要配置admin.conf,安装成功结尾处也会提示如何配置，同时需要保存输出最后一行的 join 命令 有两种方法可以配置 admin.config\n非 root 用户\n1 2 3 4 # 复制配置文件 mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config root 用户\n1 2 # 设置环境变量 export KUBECONFIG=/etc/kubernetes/admin.conf 保存生成的 join 命令\n1 2 kubeadm join 192.168.0.20:6443 --token 96f70b.i1asdsfderoaiq5o \\ --discovery-token-ca-cert-hash sha256:c2ada929e36dd048298adb438fdafdsab8f2a6e499911fa09fce26 配置网络插件 到当前步骤， k8s 基本安装完成，但是节点依然是 NotReady 状态，这是因为还没有安装网络插件。 拷贝事先准备好的的 calico.yml\n1 kubectl apply -f calico.yml 安装配置完成之后，等待片刻，再次查看节点状态。kubectl get nodes，可以看到状态已经变为 Ready 状态 node 节点加入集群 node 节点安装配置除去 kuberadm init 和 网络插件配置之外，安装步骤基本一致（node 节点上也不用安装 kubectl）。\n更改 hostname 1 hostnamectl set-hostname node1 加入集群 使用 kubeadm join 加入集群，拷贝之前步骤中安装成功之后生成的 join 命令\n1 2 kubeadm join 192.168.0.20:6443 --token 96f70b.i1asdsfderoaiq5o \\ --discovery-token-ca-cert-hash sha256:c2ada929e36dd048298adb438fdafdsab8f2a6e499911fa09fce26 hostname\nselinux\nfirewalld\nswapoff -a\n下载 Kubernets 的相关镜像 查看所需镜像列表\n1 kubeadm config image list kubeadm init \u0026ndash;pod-network-cidr=192.168.0.0/16\n","date":"2022-04-23T15:07:32Z","permalink":"https://coderfamer.github.io/p/centos7-%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85-kubernets-k8s/","title":"centos7 离线安装 kubernets (k8s)"},{"content":"k8s 重新生成 token k8s 安装之后会自动生成一个有效期为 24h 的 token，超时之后就需要重新生成新的 token\n方法 生成 token\n1 kubeadm token create 获取ca证书 hash 值\n1 openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2\u0026gt;/dev/null | openssl dgst -sha256 -hex | sed \u0026#39;s/^.* //\u0026#39; ** 查看 token **\n1 kubeadm token list 上述步骤完成之后就可以添加新的 node 节点到 master 了\n1 kubeadm join \u0026lt;master_ip\u0026gt;:6443 --token \u0026lt;TOKEN\u0026gt; --discovery-token-ca-cert-hash share256:\u0026lt;HASH\u0026gt; ","date":"2022-04-23T15:07:32Z","permalink":"https://coderfamer.github.io/p/centos7-%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85-kubernets-k8s/","title":"centos7 离线安装 kubernets (k8s)"},{"content":"windows 清除 samba 登录状态 简介 windows 登录 samba 共享目录之后，会保存当前用户的缓存，每次访问之后就无需再次输入账户密码，想要使用其他账户就需要把当前账户状态清理掉\n操作 方法一 重启电脑，如果保存用户名密码重启电脑不会清理账户状态\n方法二 命令行清理\n打开 cmd 命令行窗口\n查看所有连接\n1 net use 清除某个连接\n1 net use \u0026lt;remote-name\u0026gt; /del 清除所有连接\n1 net use * /del ","date":"2022-03-14T15:07:32Z","permalink":"https://coderfamer.github.io/p/windows-%E6%B8%85%E9%99%A4-samba-%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81/","title":"windows 清除 samba 登录状态"},{"content":"git 基于某个分支重建项目 简介 项目中因为不同需求构建多分支，其中某个分支改动量较大，想要独立成一个业务项目，本文记录了相关操作\n过程 重建 在项目目录中检出分支\n1 git checkout \u0026lt;branch_name\u0026gt; 拷贝项目到一个新的目录，并切换目录\n1 cp project new_project -r \u0026amp;\u0026amp; cd new_project 替换当前分支为主分支\n1 2 git branch -D master git branch -m master 建立远程仓库（根据项目仓库所在位置，自行创建）\n修改仓库地址并提交内容\n1 2 git remote set-url origin \u0026lt;new-remote-url\u0026gt; git push origin master 清理分支 如果旧项目中有很多分支和远程分支，在新项目中会显的杂乱，可以利用 git 命令清理一些无效分支，即不想保存在 remote 的分支\n查看无效分支\n1 git remote prune origin --dry-run 清理无效分支\n1 git remote prune origin 如果本地还有一些已检出的分支需要清理，需要手动在本地清理\n1 git branch -d \u0026lt;branch1 branch2 ...\u0026gt; ","date":"2022-03-08T15:07:32Z","permalink":"https://coderfamer.github.io/p/git-%E5%9F%BA%E4%BA%8E%E6%9F%90%E4%B8%AA%E5%88%86%E6%94%AF%E9%87%8D%E6%96%B0%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE/","title":"git 基于某个分支重新构建项目"},{"content":"cmake external 外部项目超级构建设置 runtime 路径 简介 在使用 cmake 超级构建的时候，想要指定二进制文件的输出路径。\nExternalProject_Add 参数中有一个 BINARY_DIR 选项可以指定输出路径，在构建的过程中，发现这个参数输出路径不仅会包含编译的二进制文件，还会把 cmake 自身产生的一些二进制文件同时包含进去。\n后参阅 cmake 文档，发现 ExternalProject_Add 中的 CMAKE_ARGS 选项和 set_target_properties 搭配可仅仅指定编译的二进制文件输出到指定路径\n配置 目录结构 代码 顶层 CMakeLists.txt 内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 cmake_minimum_required(VERSION 3.5) project(demo LANGUAGES CXX) set_property(DIRECTORY PROPERTY EP_BASE ${CMAKE_BINARY_DIR}/subprojects) set(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage) include(ExternalProject) ExternalProject_Add( log SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src CMAKE_ARGS -DRUNTIME_OUTPUT_DIRECTORY=${PROJECT_SOURCE_DIR}/run BUILD_ALWAYS 1 INSTALL_COMMAND \u0026#34;\u0026#34; ) CMAKE_ARGS 添加 runtime 参数 src 目录中 CMakeLists.txt 内容\n1 2 3 4 5 6 7 8 9 10 11 cmake_minimum_required(VERSION 3.5) project(demo_core LANGUAGES CXX) add_executable(core main.cpp) message(\u0026#34;=========================${RUNTIME_OUTPUT_DIRECTORY}\u0026#34;) set_target_properties(core PROPERTIES RUNTIME_OUTPUT_DIRECTORY \u0026#34;${RUNTIME_OUTPUT_DIRECTORY}\u0026#34; ) main.cpp\n1 2 3 4 5 6 7 8 9 10 #include \u0026lt;iostream\u0026gt; int main() { std::cout \u0026lt;\u0026lt; \u0026#34;hello!!!\u0026#34; \u0026lt;\u0026lt; std::endl; return 0; } 构建\n1 2 3 mkdir build \u0026amp;\u0026amp; cd build cmake .. make 产出目录结构和运行 引用 ExternalProject — CMake 3.23.0-rc2 Documentation\ncmake-buildsystem(7) — CMake 3.23.0-rc2 Documentation\nCMake set CMAKE_RUNTIME_OUTPUT_DIRECTORY for a specific target only - Stack Overflow\n","date":"2022-03-06T23:07:32Z","permalink":"https://coderfamer.github.io/p/cmake-external-%E5%A4%96%E9%83%A8%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE-runtime-%E8%B7%AF%E5%BE%84/","title":"cmake external 外部项目设置 runtime 路径"},{"content":"文件浏览器 xyplorer directory opus total comman\n","date":"2021-11-02T20:07:32Z","permalink":"https://coderfamer.github.io/p/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/","title":"常用软件清单"},{"content":"git describe 命令详解 git 获取最新的 tag 查找最近的tag\n1 2 3 git describe # 不需要后缀 git describe --abbrev=0 获取当前分支的tag\n1 git describe --abbrev=0 --tags 获取所有分支的tag\n1 git describe --tags `git rev-list --tags --max-count=1` ","date":"2021-08-29T15:07:32Z","permalink":"https://coderfamer.github.io/p/git-describe-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/","title":"git describe 命令详解"},{"content":"Samba - 如何配置 samba 客户端 SMB（Server Message Block）又称 CIFS(Common Internet File System),一种应用层网络传输协议。 本文介绍 centos 7 如何访问 smb 服务器的共享目录\n安装 samba 软件 1 yum -y install samba samba-client cifs-utils 注意: 推荐安装 samba 软件\n创建挂载目录\n1 mkdir -p /mnt/projects 确认是否能够连接到服务器，以及可以访问的共享目录\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # sambalicent -L //samba-server -U samba-username smbclient -L //samba-server -U samba Enter SAMBA\\samba_user1\u0026#39;s password: Domain=[LOCALHOST] OS=[Windows 6.1] Server=[Samba 4.6.2] Sharename Type Comment --------- ---- ------- homes Disk Home Directories print$ Disk Printer Drivers shared Disk Shared Directories projects Disk Shared Directories IPC$ IPC IPC Service (Samba server samba-storage) samba Disk Home Directories Domain=[LOCALHOST] OS=[Windows 6.1] Server=[Samba 4.6.2] Server Comment --------- ------- Workgroup Master --------- ------- SAMBA LOCALHOST 手动挂载测试\n1 mount -t cifs -o user=samba-username,password=pw123 //samba-server/projects /mnt/projects 挂载成功之后，使用 df -h 命令可查看目录映射 解挂命令\n1 unmount /mnt/projects 添加开机自动挂载 在 /etc/fstab 文件里面添加类似命令\n1 //samba-server/projects /mnt/projects cifs username=samba,password=pw123,soft,rw 0 0 测试\n1 mount -a 参考文档 Samba – How to set up a Samba client on CentOS/RHEL 7\n","date":"2021-08-26T16:07:32Z","permalink":"https://coderfamer.github.io/p/centos-7-%E9%85%8D%E7%BD%AE-samba-client/","title":"centos 7 配置 samba client"},{"content":"git stash 命令 储藏修改 问题 在新增业务的过程中，需要修复一个紧急bug，但是当前分支已经修改了很多内容，想要切换分支，但是不想提交当前的内容。\n解决办法 可以把当前的修改内容储藏起来，并将储藏内容推送到栈上\n用法 保存 1 git stash [save message] save为可选项，可对当前的储藏添加备注信息。\n取出 1 2 3 4 git stash pop\t# 恢复最近一次的储藏内容，恢复一次即删除 git stash pop stash@{num}\t# 恢复指定序号的储藏内容 git stash apply\t# 同上，不过可恢复多次 git stash apply stash@{num}\t# 同上 其它 1 2 3 git stash list git stash drop git stash clear ","date":"2021-05-18T03:41:23Z","permalink":"https://coderfamer.github.io/p/git-stash-%E5%91%BD%E4%BB%A4-%E5%82%A8%E8%97%8F%E4%BF%AE%E6%94%B9/","title":"git stash 命令 储藏修改"},{"content":"","date":"2021-05-06T20:07:32Z","permalink":"https://coderfamer.github.io/p/wireguard-%E9%85%8D%E7%BD%AE/","title":"wireguard 配置"},{"content":"xyplorer 访问 samba 时候拒绝访问 问题 Ubuntu 配置好 samba 之后，自带文件管理器可以访问 samba 共享目录，但是用 xyplorer 访问时候， xyplorer 提示拒绝访问\n原因 本地文件管理器在访问 samba 共享目录时候会提示输入账户名密码，而 xyplorer 不会与自带文件管理器同步密码，所以导致拒绝访问\n解决办法 只需要在 xyplorer 中做个网络映射即可\n操作步骤 Tools -\u0026gt; 特殊工具 -\u0026gt; 映射网络驱动器 任选一个盘符之后，输入 samba 创建的账户名即可\n","date":"2021-05-06T20:07:32Z","permalink":"https://coderfamer.github.io/p/xyplorer-%E8%AE%BF%E9%97%AE-samba-%E6%97%B6%E5%80%99%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE/","title":"xyplorer 访问 samba 时候拒绝访问"},{"content":"1 直接头文件引用\n2 静态库引用\n3 系统安装引用 find_package\n优劣势\nfind_package编译速度最快，静态库引用和头文件都比较慢，目前不清楚原因\n安装教程\n9. CMake - Spdlog v1.x - DocsForge\n","date":"0001-01-01T00:00:00Z","permalink":"https://coderfamer.github.io/p/","title":""}]